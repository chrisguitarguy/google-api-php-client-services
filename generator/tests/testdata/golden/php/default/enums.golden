=== begin: Enums.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace Google\Service;

use Google\Client;

/**
 * Service definition for Enums (v1).
 *
 * <p>
 * verifying the PHP float primitive type</p>
 *
 * <p>
 * For more information about this service, see the API
 * <a href="" target="_blank">Documentation</a>
 * </p>
 *
 * @author Google, Inc.
 */
class Enums extends \Google\Service
{
  /** A non googleapis.com scope. */
  const MAIL_GOOGLE_COM =
      "https://mail.google.com/";
  /** a product level scope. */
  const PRODUCT =
      "https://www.googleapis.com/auth/product";
  /** A typical scope. */
  const USERINFO_EMAIL =
      "https://www.googleapis.com/auth/userinfo.email";

  public $enums;

  /**
   * Constructs the internal representation of the Enums service.
   *
   * @param Client|array $clientOrConfig The client used to deliver requests, or a
   *                                     config array to pass to a new Client instance.
   * @param string $rootUrl The root URL used for requests to the service.
   */
  public function __construct($clientOrConfig = [], $rootUrl = null)
  {
    parent::__construct($clientOrConfig);
    $this->rootUrl = $rootUrl ?: 'https://www.googleapis.com/';
    $this->servicePath = 'php_float_type/v1/';
    $this->version = 'v1';
    $this->serviceName = 'enums';

    $this->enums = new Enums\Resource\Enums(
        $this,
        $this->serviceName,
        'enums',
        [
          'methods' => [
            'get' => [
              'path' => 'enums',
              'httpMethod' => 'GET',
              'parameters' => [],
            ],
          ]
        ]
    );
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Enums::class, 'Google_Service_Enums');
=== end: Enums.php
=== begin: Enums/Enums/ObjectWithEnumProperty/PropName.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace Google\Service\Enums\Enums\ObjectWithEnumProperty;

final class PropName
{
  /**
   * meaningful api docs here
   * @var string
   */
  const ONE = "one";
  /**
   * and here too!
   * @var string
   */
  const TWO = "two";
}
=== end: Enums/Enums/ObjectWithEnumProperty/PropName.php
=== begin: Enums/Enums/SimpleEnum.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace Google\Service\Enums\Enums;

final class SimpleEnum
{
  /**
   * first
   * @var string
   */
  const ONE = "one";
  /**
   * second
   * @var string
   */
  const TWO = "two";
}
=== end: Enums/Enums/SimpleEnum.php
=== begin: Enums/ObjectWithEnumProperty.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace Google\Service\Enums;

class ObjectWithEnumProperty extends \Google\Model
{
  /**
   * @var string
   */
  public $notEnum;
  /**
   * @var string
   * @see Google\Service\Enums\Enums\ObjectWithEnumProperty\PropName
   */
  public $propName;

  /**
   * @param string
   */
  public function setNotEnum($notEnum)
  {
    $this->notEnum = $notEnum;
  }
  /**
   * @return string
   */
  public function getNotEnum()
  {
    return $this->notEnum;
  }
  /**
   * @param string
   */
  public function setPropName($propName)
  {
    $this->propName = $propName;
  }
  /**
   * @return string
   */
  public function getPropName()
  {
    return $this->propName;
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ObjectWithEnumProperty::class, 'Google_Service_Enums_ObjectWithEnumProperty');
=== end: Enums/ObjectWithEnumProperty.php
=== begin: Enums/Resource/Enums.php
<?php
/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

namespace Google\Service\Enums\Resource;

use Google\Service\Enums\ObjectWithEnums;

/**
 * The "enums" collection of methods.
 * Typical usage is:
 *  <code>
 *   $enumsService = new Google\Service\Enums(...);
 *   $enums = $enumsService->enums;
 *  </code>
 */
class Enums extends \Google\Service\Resource
{
  /**
   * returns an object with enums (enums.get)
   *
   * @param array $optParams Optional parameters.
   * @return ObjectWithEnums
   */
  public function get($optParams = [])
  {
    $params = [];
    $params = array_merge($params, $optParams);
    return $this->call('get', [$params], ObjectWithEnums::class);
  }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Enums::class, 'Google_Service_Enums_Resource_Enums');
=== end: Enums/Resource/Enums.php
